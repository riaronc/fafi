import { z } from 'zod';
import { AccountType } from '@/server/db/client'; // Assuming AccountType enum is generated by Prisma

// Base schema for common fields
const accountBaseSchema = z.object({
  name: z.string().min(1, 'Account name is required').max(100),
  // Ensure the value corresponds to the Prisma Enum
  type: z.nativeEnum(AccountType),
  currency: z.string().length(3, 'Currency code must be 3 letters (e.g., USD)'),
  bankId: z.string().max(100).optional().nullable(),
});

// Schema for creating an account
export const createAccountSchema = accountBaseSchema.extend({
  // Balance received from client is in major units (e.g., dollars)
  balance: z.number({ required_error: 'Initial balance is required' }), 
});

// Schema for updating an account (all fields optional)
export const updateAccountSchema = accountBaseSchema.partial().extend({
  // Balance received from client is in major units (e.g., dollars)
  balance: z.number().optional(),
});

// Derived types for use in Server Actions and components
export type CreateAccountInput = z.infer<typeof createAccountSchema>;
export type UpdateAccountInput = z.infer<typeof updateAccountSchema>; 